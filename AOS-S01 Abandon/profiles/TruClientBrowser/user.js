/* Do not edit this file.
 *
 * If you make changes to this file while the browser is running,
 * the changes will be overwritten when the browser exits.
 *
 * To make a manual change to preferences, you can visit the URL about:config
 * For more information, see http://www.mozilla.org/unix/customizing.html#prefs
 */

//**********************************ACCESSIBILITY*************************************

// Allow automatic page refresh. Prevent accessibility message box
// disabled by default , not sure why we need it
user_pref("accessibility.blockautorefresh", false);

// Values are -1 always on. 1 always off, 0 is auto as some platform perform
// further checks.
user_pref("accessibility.force_disabled", 1);

// Disable Caret Browsing mode
// disabled by default , not sure why we need it
user_pref("accessibility.browsewithcaret", false);

// Prevents showing "switch to" dialog when moving to caret browsing mode via [F7]
user_pref("accessibility.warn_on_browsewithcaret", false);
user_pref("accessibility.browsewithcaret_shortcut.enabled", true);

//**********************************Memory*************************************
// Discards inactive image frames and re-decodes them on demand from
// compressed data.
user_pref("image.mem.discardable", false);

// if enabled, store execution times for API calls
user_pref("extensions.webextensions.enablePerformanceCounters", false);

// Maximum age in milliseconds of performance counters in children
// When reached, the counters are sent to the main process and
// reset, so we reduce memory footprint.
user_pref("extensions.webextensions.performanceCountersMaxAge", 3000);

//*************************************DOM*************************************
// Set max script execution time to 120 seconds, instead of 20 seconds by default, before
// Firefox will prompt the user to stop it. Changing to 0 will allow endless execution.
// This setting is for scripts that run with chrome privileges
user_pref("dom.max_chrome_script_run_time", 120);

// When a script is executing, Mozilla's UI will be unresponsive until the script’s thread ends.
// Correspondingly, Mozilla will alert you when a script is taking a long time to run and let you
// stop the script. This preference lets you define what “a long time” is.
// While recording our engine slows down the application, so we want to give it some time to react.
user_pref("dom.max_script_run_time", 120);

// Set the max extension content script execution time to 120 seconds instead of default 5 seconds
// This will prevent the browser display the long execution dialog
user_pref("dom.max_ext_content_script_run_time", 120);

// Disable the "Prevent page from creating additional dialogs" checkbox
user_pref("dom.successive_dialog_time_limit", 0);

// This settings comes to disable pop-up blocker
// false: pop-up blocker is not going to be active
// true: pop-up blocker will be active
user_pref("dom.disable_open_during_load", false);

//The number of pop-ups to allow from a single non-click event
//Default value is 20.
user_pref("dom.popup_maximum", 100);

//*************************************GFX*************************************
// Color management allows images and colors to be displayed consistently across a variety of devices.
// Mozilla recognizes embedded ICC profiles in image files and uses a local color profile to perform the
// color adjustments. This preference determines if Mozilla should make these adjustments.
// 0 = Off, 1 = Full, 2 = Tagged Images Only.
// See eCMSMode in gfx/thebes/gfxPlatform.h
user_pref("gfx.color_management.mode", 0);

// Disable GPU acceleration since load generators doesn't have a strong GPU, and it
// chockes very early with no indication. The performance is much better when disabling it.
// Note: if you are performing a load test on NBA2k you better enable it and call me to check
user_pref("layers.acceleration.disabled", true);

// Disable GPU memory usage by firefox
user_pref("gfx.direct2d.disabled", true);

//*************************************JAVASCRIPT*************************************
// To enable TraceMonkie Javascript compilation on XUL/chrome (FF default is true)
user_pref("javascript.options.jit.chrome", true);

// This preference controls whether chrome errors and warnings are logged to the JavaScript Console
user_pref("javascript.options.showInConsole", true);

// JSGC_MAX_MALLOC_BYTES
// How much malloc memory can be allocated before triggering a GC, in MB.
user_pref("javascript.options.mem.high_water_mark", 256);

// Whether the Gamepad API is enabled
user_pref("dom.gamepad.enabled", false);

// if enabled, store execution times for API calls
user_pref("extensions.webextensions.enablePerformanceCounters", false);

//*************************************KEYWORD*************************************
// When entering information in the Location Bar, Mozilla attempts to convert the information into a
// usable URI. For example, “mozilla.org” is automatically converted to “http://mozilla.org/”. When
// Mozilla is unable to discern what URL the u	ser wanted, the information that was entered may be
// submitted to an Internet Keywords service
// This preference determines whether or not to use Internet Keywords
user_pref("keyword.enabled", false);

//*************************************NETWORK*************************************
// Allow necko to do A/B testing. Will generally only happen if
// telemetry is also enabled as otherwise there is no way to report
// the results
user_pref("network.allow-experiments", false);

// This preference determines whether to use of the operating system's NTLM implementation to
// silently authenticate the user with their Windows domain logon with proxy servers
// We would like to prompt for authentication always
user_pref("network.automatic-ntlm-auth.allow-proxies", false);

// This preference enables proxy authentication using the negotiate method
// For us it means to fall back to NTLM whenever Kerberos is used
// Since we do support NTLM with "network.automatic-ntlm-auth.allow-proxies" option,
// it's natural to use the below option for Kerberos
user_pref("network.negotiate-auth.allow-proxies", false);

// This preference determines which sites are allowed to automatically authenticate via NTLM. If
// the user requests a site that authenticates with NTLM that is not in this list, the user will
// be prompted for login details
// We would like to prompt for authentication always
user_pref("network.automatic-ntlm-auth.trusted-uris", "");

// This preference controls when cookies expire.
//   0 - The cookie's lifetime is supplied by the server. (Default)
//   1 - The user is prompted for the cookie's lifetime.
//   2 - The cookie expires at the end of the session (when the browser closes).
//   3 - The cookie lasts for the number of days specified by network.cookie.lifetime.days
user_pref("network.cookie.lifetimePolicy", 2);

// True - Disable IPv6 DNS lookups. (Default in Mac OS X prior to 2008-01-05, OS/2)
// False - Perform IPv6 DNS lookups on IPv6-capable OSs. (Default everywhere else)
// We expect that this preference could speed up connections
user_pref("network.dns.disableIPv6", true);

// This preference controls how long to cache results
// We don't want the cache results to be deleted fast, so we use one hour, while FF default is 60.
user_pref("network.dnsCacheExpiration", 3600);

// A popular method of disguising a website’s true location is to make use of the username/password syntax
// in URLs. Normally, when sites require authentication, users can specify the username and password directly
// in the URL thusly: http://username:password@example.com/
//(This is the same syntax that FTP URLs use.) However, this syntax can be abused to make it appear as though
// the URL is that of another host:
// http://www.mozilla.org&login3:141592653589793238462643383279502884197169@example.com/evil
// In response to this possibility, Microsoft removed the syntax from IE. Mozilla’s response was to use a
// dialog to warn the user when visiting URLs that use the username and password syntax (but not when manually
// entering them). This preference lets you determine what is considered “phishy” enough to warrant displaying
// the dialog
user_pref("network.http.phishy-userpass-length", 255);

// Link prefetching is when a webpage hints to the browser that certain pages are likely to be visited, so the
// browser downloads them immediately so they can be displayed immediately when the user requests it
// This preference controls whether link prefetching is enabled
// We want to disable prefetching for accuracy (transactions)
user_pref("network.prefetch-next", false);

// This preference determines whether a specific protocol that is already configured to be handled but
// whose behavior is not defined by a specific network.protocol-handler.external.(protocol) preference
// should be handled internally or externally.
//   true - This protocol should be handled by an external application. (Default)
//   false - This protocol should be handled internally.
//    * network.protocol-handler.expose-all or network.protocol-handler.expose.(protocol)
//     (which tell the application that this protocol should be handled in some way) must be set to true
//     for this preference to take effect.
//    * Some protocols cannot be handled internally. Attempting to load a protocol that can't be handled
//      internally does nothing.
//    * This preference only exists by default for certain protocols.
//    * The external application to run is determined by the OS on Windows and by
//      network.protocol-handler.app.(protocol) on Linux and Mac. See this article for details
user_pref("network.protocol-handler.external-default", false);

// This preference determines whether a specific protocol that is already configured to be handled should
// be handled internally or externally.
//   true - This protocol should be handled by an external application.
//   false - This protocol should be handled internally.
//   * The external application to run is determined by the OS on Windows and by
//     network.protocol-handler.app.(protocol) on Linux and Mac. See this article for details.
// We should override this preference for predefined protocols: afp, data, disk, disks, hcp, javascript,
// mailto, moz-icon, ms-help, news, nntp, shell, snews, vbscript, vnd.ms.radio
user_pref("network.protocol-handler.external.afp", false);
user_pref("network.protocol-handler.external.data", false);
user_pref("network.protocol-handler.external.disk", false);
user_pref("network.protocol-handler.external.disks", false);
user_pref("network.protocol-handler.external.hcp", false);
user_pref("network.protocol-handler.external.javascript", false);
user_pref("network.protocol-handler.external.mailto", false);
user_pref("network.protocol-handler.external.moz-icon", false);
user_pref("network.protocol-handler.external.ms-help", false);
user_pref("network.protocol-handler.external.news", false);
user_pref("network.protocol-handler.external.nntp", false);
user_pref("network.protocol-handler.external.shell", false);
user_pref("network.protocol-handler.external.snews", false);
user_pref("network.protocol-handler.external.vbscript", false);
user_pref("network.protocol-handler.external.vnd.ms.radio", false);

// This preference controls whether to warn the user before opening an external application for
// protocols where a more specific network.protocol-handler.warn-external.(protocol) is not set.
//  true - Give the user a chance to cancel before passing the data to the external application.
//  false - Pass the data to the external application without warning the user.
// On one side we don't want a dialog to be open, on the other side if there is no dialog it is
// a security problem, so we choose to disable warning.
user_pref("network.protocol-handler.warn-external-default", false);

// This preference controls whether to warn the user before opening an external
// application for a specific protocol.
//   true - Give the user a chance to cancel before passing the data to the external application.
//   false - Pass the data to the external application without warning the user.
// * This preference only exists by default for certain protocols.
// UI (Firefox): On the protocol warning dialog, "Remember my choice for all links of this type"
// We should override this preference for predefined protocols: afp, data, disk, disks, hcp, javascript,
// mailto, moz-icon, ms-help, news, nntp, shell, snews, vbscript, vnd.ms.radio
// On one side we don't want a dialog to be open, on the other side if there is no dialog it
// is a security problem, so we choose to disable warning
user_pref("network.protocol-handler.warn-external.afp", false);
user_pref("network.protocol-handler.warn-external.data", false);
user_pref("network.protocol-handler.warn-external.disk", false);
user_pref("network.protocol-handler.warn-external.disks", false);
user_pref("network.protocol-handler.warn-external.hcp", false);
user_pref("network.protocol-handler.warn-external.javascript", false);
user_pref("network.protocol-handler.warn-external.mailto", false);
user_pref("network.protocol-handler.warn-external.moz-icon", false);
user_pref("network.protocol-handler.warn-external.ms-help", false);
user_pref("network.protocol-handler.warn-external.news", false);
user_pref("network.protocol-handler.warn-external.nntp", false);
user_pref("network.protocol-handler.warn-external.shell", false);
user_pref("network.protocol-handler.warn-external.snews", false);
user_pref("network.protocol-handler.warn-external.vbscript", false);
user_pref("network.protocol-handler.warn-external.vnd.ms.radio", false);

// TC_NS.RTS Support: The following settings must be defined before TC_NS.RTS manager initializes and overrides these values.
user_pref("network.dnsCacheEntries", 20);

// Disable automatic offline mode functionality
user_pref("network.manage-offline-status", false);

//*************************************PLUGIN*************************************
// True (default): Locate plugins by the directories specified in the Windows registry for PLIDs
// (currently HKLM\Software\MozillaPlugins\xxxPLIDxxx\Path)
// False: Opposite of the above
user_pref("plugin.scan.plid.all", false);
user_pref("plugins.click_to_play", false);
user_pref("plugin.load_flash_only", false);
user_pref("plugins.flashBlock.enabled", true);
user_pref("plugin.state.flash", 2);

// Update url no need.
user_pref("plugins.update.url", "");

//*************************************PRIVACY*************************************

// Do not show an icon in the status bar when a popup has been blocked
user_pref("privacy.popups.showBrowserMessage", false);
user_pref("privacy.donottrackheader.enabled", true);

//*************************************SIGNON*************************************
// Firefox’s Password Manager can expose usernames and passwords on websites with cross-site forms (that is,
// HTML forms that submit to other domains). This includes many sites that will display unsanitized user-submitted
// content, such as MySpace. As an initial defense against such attacks, this preference was created to prevent
// the Password Manager from auto-filling form fields with usernames and passwords.
//   True -  Automatically fill sign-in forms with known usernames and passwords on appropriate sites. (Default)
//   False - Do not automatically fill sign-in forms with known usernames and passwords; instead, act as though
//           there are multiple usernames/password pairs remembered for the form (fill password after username has
//           been manually typed).
// This preference is named signon.autofillForms in trunk builds, but it is likely that it will be renamed to
//  signon.prefillForms in the near future
user_pref("signon.autofillForms", false);

// True - Automatically fill sign-in forms with known usernames and passwords on appropriate sites. (Default)
// False - Do not automatically fill sign-in forms with known usernames and passwords; instead, act as though there
// are multiple usernames/password pairs remembered for the form (fill password after username has been manually typed).
// This preference is named signon.autofillForms in trunk builds, but it is likely that it will be renamed to
// signon.prefillForms in the near future
user_pref("signon.prefillForms", false);

// True: (default): Enable the Password Manager
// False Opposite of the above
user_pref("signon.rememberSignons", false);

//*************************************SECURITY*************************************
// if a server requires client certificate and the Select one automatically option preference is selected,
// the client certificate will be chosen automatically and selection dialog will not prompt to the user
user_pref("security.default_personal_cert", "Select Automatically");

// Prevent firefox from blocking pages with mixed mode
user_pref("security.mixed_content.block_active_content", false);
user_pref("security.mixed_content.block_display_content", false);

// Disable security warnings. Seems irrelevant anymore in FF 28. Kept just in case it is still valid
user_pref("security.warn_entering_secure", false);
user_pref("security.warn_entering_weak", false);
user_pref("security.warn_leaving_secure", false);
user_pref("security.warn_submit_insecure", false);
user_pref("security.warn_viewing_mixed", false);

//*************************************STARTUP***************************************
//Do not show FF welcome homepage at first run
user_pref("startup.homepage_welcome_url", "");

//*************************************NETWORK***************************************

// Trick Firefox for assuming some legacy settings were already migrated
user_pref("network.cookie.prefsMigrated", true);

//Display warning message when navigate to about:config
user_pref("general.warnOnAboutConfig", true);

//*************************************BROWSER***************************************
//TC_NS.RTS Support: must be defined before TC_NS.RTS manager initializes and overrides these values.
user_pref("browser.startup.homepage", "about:blank");

// New page should be disabled.
user_pref("browser.newtabpage.introShown", true);
user_pref("browser.newtabpage.enabled", false);
user_pref("browser.newtabpage.enhanced", false);
user_pref("browser.newtabpage.directory.ping", "about:blank"); // Dummy page to avoid exceptions.
user_pref("browser.newtabpage.directory.source", "about:blank"); // Dummy page to avoid exceptions.
user_pref("browser.aboutHomeSnippets.updateUrl", "");

// No need for content handler
user_pref("browser.contentHandlers.types.0.title", "");
user_pref("browser.contentHandlers.types.0.type", "");
user_pref("browser.contentHandlers.types.0.uri", "");
user_pref("browser.contentHandlers.types.1.title", "");
user_pref("browser.contentHandlers.types.1.uri", "");
user_pref("browser.contentHandlers.types.1.type", "");
user_pref("browser.contentHandlers.types.2.title", "");
user_pref("browser.contentHandlers.types.2.type", "");
user_pref("browser.contentHandlers.types.2.uri", "");
user_pref("browser.contentHandlers.types.3.title", "");
user_pref("browser.contentHandlers.types.3.type", "");
user_pref("browser.contentHandlers.types.3.uri", "");
user_pref("browser.contentHandlers.types.4.title", "");
user_pref("browser.contentHandlers.types.4.type", "");
user_pref("browser.contentHandlers.types.4.uri", "");
user_pref("browser.contentHandlers.types.5.title", "");
user_pref("browser.contentHandlers.types.5.type", "");
user_pref("browser.contentHandlers.types.5.uri", "");

// No pings
user_pref("browser.send_pings", false);
user_pref("browser.send_pings.max_per_link", 0);

// Tips? Why?
user_pref("browser.customizemode.tip0.learnMoreUrl", "");
user_pref("browser.customizemode.tip0.shown", true);

// Download manager scan should not work on our product
user_pref("browser.download.manager.scanWhenDone", false);

// No report for app URL to anyone.
user_pref("browser.safebrowsing.appRepURL", "");

// Don't show browser rights
user_pref("browser.rights.3.shown", true);

//Disable creation of thumbnails for visited sites
user_pref("browser.pagethumbnails.capturing_disabled", true);

// Prevent caching pages on the disk since we are using private browsing anyway
user_pref("browser.cache.disk.enable", false);

// Disable offline cache (might impact offline storage of HTML 5)
user_pref("browser.cache.offline.enable", true);

// Disable new cache mechanism which over populates the profile directory
user_pref("browser.cache.use_new_backend", 0);
user_pref("browser.cache.use_new_backend_temp", false);

// Disable download of AUT favicon
user_pref("browser.chrome.site_icons", false);

// Disable showing browsed pages in Windows "Recent Documents" feature
user_pref("browser.download.manager.addToRecentDocs", false);

// Allow quitting the browser during file download without prompting the user to take action
user_pref("browser.download.manager.quitBehavior", 2);

// Prevent anti virus from scanning downloaded files as download has finished
user_pref("browser.download.manager.scanWhenDone", false);

// Do not save forms or search box data
user_pref("browser.formfill.enable", false);

// Do not import bookmark data from file to the database
user_pref("browser.places.importBookmarksHTML", false);

// Do not automatically start Firefox in private browsing mode
user_pref("browser.privatebrowsing.autostart", false);

// Disable Google Safe  Browsing extension since it creates additional not relevant requests
user_pref("browser.safebrowsing.enabled", false);
user_pref("browser.safebrowsing.malware.enabled", false);
user_pref("browser.safebrowsing.remoteLookups", false);
user_pref("browser.safebrowsing.malware.reportURL", "");
user_pref("browser.safebrowsing.reportMalwareErrorURL", "");
user_pref("browser.safebrowsing.reportErrorURL", "");
user_pref("browser.safebrowsing.reportGenericURL", "");
user_pref("browser.safebrowsing.reportPhishURL", "");
user_pref("browser.safebrowsing.warning.infoURL", "");
user_pref("browser.safebrowsing.reportMalwareURL", "");
user_pref("browser.safebrowsing.keyURL", "");
user_pref("browser.safebrowsing.gethashURL", "");
user_pref("browser.safebrowsing.reportURL", "");
user_pref("browser.safebrowsing.updateURL", "");
user_pref("browser.safebrowsing.provider.mozilla.updateURL", "");
user_pref("browser.safebrowsing.id", "");
user_pref("services.sync.prefs.sync.browser.safebrowsing.enabled", false);
user_pref("services.sync.prefs.sync.browser.safebrowsing.malware.enabled", false);

user_pref("browser.sessionstore.restore_on_demand", false);
user_pref("browser.sessionstore.warnOnQuit", false);

// Disabling all session restore options after crash and after regular FF closing
user_pref("browser.sessionstore.resume_from_crash", false);
user_pref("browser.sessionstore.max_resumed_crashes", 0);
user_pref("browser.sessionstore.max_tabs_undo", 0);
user_pref("browser.sessionstore.max_windows_undo", 0);
user_pref("browser.startup.page", 1); // this is here to prevent restoring with last viewed page

// Disable any prompt when quiting the browser even if there are several tabs opened
user_pref("browser.warnOnQuit", false);
user_pref("browser.warnOnClose", false);
user_pref("browser.warnOnOpen", false);

// Always use an error page instead of alert for sites that can't be loaded because of a network problem
user_pref("browser.xul.error_pages.enabled", true);

// Disable default browser check on browser startup
user_pref("browser.shell.checkDefaultBrowser", false);

// Disable search engines updates
user_pref("browser.search.update", false);

// Prevent Firefox from checking of the search engine needs to be updated
user_pref("browser.search.updateinterval", -1);

// Disable search suggestions
user_pref("browser.search.suggest.enabled", false);

// Prevent the search engine from logging messgae to Firefox Console
user_pref("browser.search.log", false);

// The maximum number of pages in the browser's session history, i.e. the maximum number of URLs you can traverse purely through the Back/Forward buttons.
// Default value is 50.
user_pref("browser.sessionhistory.max_entries", 10);

// Determines the maximum number of content viewers to cache for "bfcache" (fast back/forward navigation).
// Default value is -1 (calculate based on available memory). All values less than 0 are equivalent.
// Note: Firefox 1.5 and above only. Supersedes browser.sessionhistory.max_viewers.
user_pref("browser.sessionhistory.max_total_viewers", 0);

// Disable taskbar preview of windows
user_pref("browser.taskbar.previews.enable", false);

// Tracking protection
user_pref("browser.trackingprotection.gethashURL", "");
user_pref("browser.trackingprotection.updateURL", "");
// by default, tracking protection is enabled only for private browsing, which is used by TC, disable it by default
user_pref("privacy.trackingprotection.enabled", false); // disable tracking protection for normal browsing
user_pref("privacy.trackingprotection.pbmode.enabled", false); // disable tracking protection for private browsing

// captive portal detection is to check if current network is WIFI which needs forced login,
// such as WIFI provided by air ports or hotels, disable it by default
user_pref("network.captive-portal-service.enabled", false);

//*************************************APPLICATION***************************************
// This preference determines whether the application will auto-update
user_pref("app.update.enabled", false);
user_pref("app.update.auto", false);
user_pref("app.update.auto.migrated", false);
user_pref("app.update.url", "");
user_pref("app.update.url.details", "");
user_pref("app.update.url.manual", "");
user_pref("app.feedback.baseURL", "");

//***************************************EXTENTIONS***************************************
// Prevent periodical retrieval of extensions blocklist from the server specified in extensions.blocklist.url
user_pref("extensions.blocklist.enabled", false);

user_pref("extensions.legacy.enabled", false);

// Disable extensions automatic updates
user_pref("extensions.update.enabled", false);
user_pref("extensions.update.notifyUser", false);

// Always unpack installed extensions (link from the extensions folder to a packed extension is not working)
user_pref("extensions.alwaysUnpack", true);

// Disable the firebug firstrun page
user_pref("extensions.firebug.currentVersion", "1.9.1");

// Prevent Add-on Control Wizard from being prompt on first Firefox run
user_pref("extensions.autoDisableScopes", 0); //consider changing from 0 to 11

user_pref("extensions.webservice.discoverURL", "");
user_pref("extensions.update.background.url", "");

user_pref("gecko.handlerService.schemes.irc.0.name", "");
user_pref("gecko.handlerService.schemes.irc.0.uriTemplate", "");
user_pref("gecko.handlerService.schemes.irc.1.name", "");
user_pref("gecko.handlerService.schemes.irc.1.uriTemplate", "");
user_pref("gecko.handlerService.schemes.irc.2.name", "");
user_pref("gecko.handlerService.schemes.irc.2.uriTemplate", "");
user_pref("gecko.handlerService.schemes.irc.3.name", "");
user_pref("gecko.handlerService.schemes.irc.3.uriTemplate", "");
user_pref("gecko.handlerService.schemes.ircs.0.name", "");
user_pref("gecko.handlerService.schemes.ircs.0.uriTemplate", "");
user_pref("gecko.handlerService.schemes.ircs.1.name", "");
user_pref("gecko.handlerService.schemes.ircs.1.uriTemplate", "");
user_pref("gecko.handlerService.schemes.ircs.2.name", "");
user_pref("gecko.handlerService.schemes.ircs.2.uriTemplate", "");
user_pref("gecko.handlerService.schemes.ircs.3.name", "");
user_pref("gecko.handlerService.schemes.ircs.3.uriTemplate", "");

user_pref("gecko.handlerService.schemes.mailto.0.name", "");
user_pref("gecko.handlerService.schemes.mailto.0.uriTemplate", "");
user_pref("gecko.handlerService.schemes.mailto.1.name", "");
user_pref("gecko.handlerService.schemes.mailto.1.uriTemplate", "");
user_pref("gecko.handlerService.schemes.mailto.2.name", "");
user_pref("gecko.handlerService.schemes.mailto.2.uriTemplate", "");
user_pref("gecko.handlerService.schemes.mailto.3.name", "");
user_pref("gecko.handlerService.schemes.mailto.3.uriTemplate", "");

user_pref("gecko.handlerService.schemes.webcal.0.name", "");
user_pref("gecko.handlerService.schemes.webcal.0.uriTemplate", "");
user_pref("gecko.handlerService.schemes.webcal.1.name", "");
user_pref("gecko.handlerService.schemes.webcal.1.uriTemplate", "");
user_pref("gecko.handlerService.schemes.webcal.2.name", "");
user_pref("gecko.handlerService.schemes.webcal.2.uriTemplate", "");
user_pref("gecko.handlerService.schemes.webcal.3.name", "");
user_pref("gecko.handlerService.schemes.webcal.3.uriTemplate", "");

//***********************************HEALTH REPORT***************************************
// Disable Firefox health reports
user_pref("datareporting.healthreport.service.enabled", false);
user_pref("datareporting.healthreport.service.firstRun", true);
user_pref("datareporting.healthreport.uploadEnabled", false);
user_pref("datareporting.healthreport.logging.consoleEnabled", false);
user_pref("datareporting.healthreport.pendingDeleteRemoteData", true);
user_pref("datareporting.healthreport.about.reportUrl", "");
user_pref("datareporting.healthreport.documentServerURI", "");
user_pref("datareporting.healthreport.infoURL", "");
user_pref("datareporting.policy.dataSubmissionEnabled", false);
user_pref("datareporting.policy.dataSubmissionPolicyAcceptedVersion", 1);

user_pref("browser.tabs.crashReporting.sendReport", false);

//***************************************LAYOUT******************************************
// Prevent css warnings from appearing in Firefox Error Console
user_pref("layout.css.report_errors", false);

// Disable spell checker in text area
user_pref("layout.spellcheckDefault", 0);

//***************************************THEME******************************************
user_pref("browser.devedition.theme.enabled", true);

//***************************************TOOLKIT******************************************
// disable the "help firefox by reporting memory..."
user_pref("toolkit.telemetry.prompted", 2);
user_pref("toolkit.telemetry.rejected", true);
user_pref("toolkit.telemetry.enabled", false);
user_pref("toolkit.telemetry.server", "");
user_pref("toolkit.telemetry.unified", false);
user_pref("browser.newtabpage.activity-stream.feeds.telemetry", false);
user_pref("browser.newtabpage.activity-stream.telemetry", false);
user_pref("toolkit.telemetry.reportingpolicy.firstRun", false);
user_pref("toolkit.telemetry.unifiedIsOptIn", false);
user_pref("toolkit.telemetry.archive.enabled", false);
// Enables sending the shutdown ping when Firefox shuts down.
user_pref("toolkit.telemetry.shutdownPingSender.enabled", false);
// Enables sending the shutdown ping using the pingsender from the first session.
user_pref("toolkit.telemetry.shutdownPingSender.enabledFirstSession", false);
// Enables sending a duplicate of the first shutdown ping from the first session.
user_pref("toolkit.telemetry.firstShutdownPing.enabled", false);
// Enables sending the 'new-profile' ping on new profiles.
user_pref("toolkit.telemetry.newProfilePing.enabled", false);
// Enables sending 'update' pings on Firefox updates.
user_pref("toolkit.telemetry.updatePing.enabled", false);
// Enables sending 'bhr' pings when the browser hangs.
user_pref("toolkit.telemetry.bhrPing.enabled", false);
// Enables using Hybrid Content Telemetry from Mozilla privileged pages.
user_pref("toolkit.telemetry.hybridContent.enabled", false);

user_pref("experiments.activeExperiment", false);
user_pref("experiments.enabled", false);
user_pref("experiments.supported", false);
user_pref("network.allow-experiments", false);

// Ping Centre Telemetry settings.
user_pref("browser.ping-centre.telemetry", false);
user_pref("browser.ping-centre.log", false);
user_pref("browser.ping-centre.staging.endpoint", "about:blank");
user_pref("browser.ping-centre.production.endpoint", "about:blank");

//***************************************GEO LOCATION******************************************
// Geo locations
user_pref("geo.enabled", false);
user_pref("geo.wifi.uri", "");
user_pref("browser.geolocation.warning.infoURL", "");
user_pref("browser.search.geoip.url", "");

//***************************************MEDIA SETTINGS******************************************
user_pref("media.peerconnection.enabled", false);

//***************************************SYNC SETTINGS******************************************
user_pref("services.sync.jpake.serverURL", "");
user_pref("services.sync.privacyURL", "");
user_pref("services.sync.serverURL", "");
user_pref("services.sync.statusURL", "");
user_pref("services.sync.syncKeyHelpURL", "");
user_pref("services.sync.termsURL", "");
user_pref("services.sync.tokenServerURI", "");
user_pref("services.sync.sendVersionInfo", false);
user_pref("services.sync.log.rootLogger", "Error");
user_pref("services.sync.log.logger.addonutils", "Error");
user_pref("services.sync.log.logger.declined", "Error");
user_pref("services.sync.log.logger.service.main", "Error");
user_pref("services.sync.log.logger.status", "Error");
user_pref("services.sync.log.logger.authenticator", "Error");
user_pref("services.sync.log.logger.network.resources", "Error");
user_pref("services.sync.log.logger.service.jpakeclient", "Error");
user_pref("services.sync.log.logger.engine.bookmarks", "Error");
user_pref("services.sync.log.logger.engine.clients", "Error");
user_pref("services.sync.log.logger.engine.forms", "Error");
user_pref("services.sync.log.logger.engine.history", "Error");
user_pref("services.sync.log.logger.engine.passwords", "Error");
user_pref("services.sync.log.logger.engine.prefs", "Error");
user_pref("services.sync.log.logger.engine.tabs", "Error");
user_pref("services.sync.log.logger.engine.addons", "Error");
user_pref("services.sync.log.logger.engine.apps", "Error");
user_pref("services.sync.log.logger.identity", "Error");
user_pref("services.sync.log.logger.userapi", "Error");
user_pref("services.sync.engine.addons", false);
user_pref("services.sync.engine.bookmarks", false);
user_pref("services.sync.engine.history", false);
user_pref("services.sync.engine.passwords", false);
user_pref("services.sync.engine.prefs", false);
user_pref("services.sync.engine.tabs", false);
user_pref("services.sync.prefs.sync.accessibility.browsewithcaret", false);
user_pref("services.sync.prefs.sync.accessibility.blockautorefresh", false);
user_pref("services.sync.prefs.sync.accessibility.typeaheadfind", false);
user_pref("services.sync.prefs.sync.accessibility.typeaheadfind.linksonly", false);
user_pref("services.sync.prefs.sync.addons.ignoreUserEnabledChanges", false);
user_pref("services.sync.prefs.sync.browser.formfill.enable", false);
user_pref("services.sync.prefs.sync.app.update.mode", false);
user_pref("services.sync.prefs.sync.browser.link.open_newwindow", false);
user_pref("services.sync.prefs.sync.browser.newtabpage.enabled", false);
user_pref("services.sync.prefs.sync.browser.newtabpage.enhanced", false);
user_pref("services.sync.prefs.sync.browser.newtabpage.pinned", false);
user_pref("services.sync.prefs.sync.browser.safebrowsing.enabled", false);
user_pref("services.sync.prefs.sync.browser.offline-apps.notify", false);
user_pref("services.sync.prefs.sync.browser.search.update", false);
user_pref("services.sync.prefs.sync.browser.sessionstore.restore_on_demand", false);
user_pref("services.sync.prefs.sync.browser.startup.homepage", false);
user_pref("services.sync.prefs.sync.browser.startup.page", false);
user_pref("services.sync.prefs.sync.browser.tabs.loadInBackground", false);
user_pref("services.sync.prefs.sync.browser.tabs.warnOnClose", false);
user_pref("services.sync.prefs.sync.browser.tabs.warnOnOpen", false);
user_pref("services.sync.prefs.sync.browser.urlbar.autocomplete.enabled", false);
user_pref("services.sync.prefs.sync.browser.urlbar.matchBuckets", false);
user_pref("services.sync.prefs.sync.browser.urlbar.maxRichResults", false);
user_pref("services.sync.prefs.sync.browser.urlbar.suggest.bookmark", false);
user_pref("services.sync.prefs.sync.browser.urlbar.suggest.history", false);
user_pref("services.sync.prefs.sync.browser.urlbar.suggest.openpage", false);
user_pref("services.sync.prefs.sync.browser.urlbar.suggest.searches", false);
user_pref("services.sync.prefs.sync.dom.disable_open_during_load", false);
user_pref("services.sync.prefs.sync.dom.disable_window_flip", false);
user_pref("services.sync.prefs.sync.dom.disable_window_move_resize", false);
user_pref("services.sync.prefs.sync.dom.event.contextmenu.enabled", false);
user_pref("services.sync.prefs.sync.extensions.personas.current", false);
user_pref("services.sync.prefs.sync.extensions.update.enabled", false);
user_pref("services.sync.prefs.sync.intl.accept_languages", false);
user_pref("services.sync.prefs.sync.javascript.enabled", false);
user_pref("services.sync.prefs.sync.layout.spellcheckDefault", false);
user_pref("services.sync.prefs.sync.lightweightThemes.isThemeSelected", false);
user_pref("services.sync.prefs.sync.lightweightThemes.usedThemes", false);
user_pref("services.sync.prefs.sync.network.cookie.cookieBehavior", false);
user_pref("services.sync.prefs.sync.network.cookie.lifetimePolicy", false);
user_pref("services.sync.prefs.sync.permissions.default.image", false);
user_pref("services.sync.prefs.sync.pref.advanced.images.disable_button.view_image", false);
user_pref("services.sync.prefs.sync.pref.advanced.javascript.disable_button.advanced", false);
user_pref("services.sync.prefs.sync.pref.privacy.disable_button.cookie_exceptions", false);
user_pref("services.sync.prefs.sync.pref.downloads.disable_button.edit_actions", false);
user_pref("services.sync.prefs.sync.privacy.clearOnShutdown.cache", false);
user_pref("services.sync.prefs.sync.privacy.clearOnShutdown.cookies", false);
user_pref("services.sync.prefs.sync.privacy.clearOnShutdown.downloads", false);
user_pref("services.sync.prefs.sync.privacy.clearOnShutdown.formdata", false);
user_pref("services.sync.prefs.sync.privacy.clearOnShutdown.history", false);
user_pref("services.sync.prefs.sync.privacy.clearOnShutdown.offlineApps", false);
user_pref("services.sync.prefs.sync.privacy.clearOnShutdown.passwords", false);
user_pref("services.sync.prefs.sync.privacy.clearOnShutdown.sessions", false);
user_pref("services.sync.prefs.sync.privacy.clearOnShutdown.siteSettings", false);
user_pref("services.sync.prefs.sync.privacy.donottrackheader.enabled", false);
user_pref("services.sync.prefs.sync.privacy.sanitize.sanitizeOnShutdown", false);
user_pref("services.sync.prefs.sync.privacy.trackingprotection.enabled", false);
user_pref("services.sync.prefs.sync.security.OCSP.enabled", false);
user_pref("services.sync.prefs.sync.security.OCSP.require", false);
user_pref("services.sync.prefs.sync.security.default_personal_cert", false);
user_pref("services.sync.prefs.sync.security.tls.version.max", false);
user_pref("services.sync.prefs.sync.security.tls.version.min", false);
user_pref("services.sync.prefs.sync.spellchecker.dictionary", false);
user_pref("services.sync.prefs.sync.signon.rememberSignons", false);
user_pref("services.sync.prefs.sync.xpinstall.whitelist.required", false);

//***************************************DEVTOOLS SETTINGS******************************************
user_pref("devtools.webide.enabled", false);
user_pref("devtools.webide.adaptersAddonURL", "");
user_pref("devtools.webide.adbAddonURL", "");
user_pref("devtools.webide.addonsURL", "");
user_pref("devtools.webide.simulatorAddonsURL", "");
user_pref("devtools.webide.templatesURL", "");

//***************************************H264 EXTENSION SETTINGS******************************************
// prevent automatic downloading of h264 extension on startup
user_pref("media.gmp-gmpopenh264.autoupdate", false);
//****************************************Add for Firefox 55**********************************************
// prevent automatic downloading of Widevine DRM extension on startup
user_pref("media.gmp-widevinecdm.enabled", false);

//****************************************Add for Firefox 40**********************************************
user_pref("browser.tabs.remote.desktopbehavior", false);
// If set to false, FxAccounts and Sync will be unavailable.
// A restart is mandatory after flipping that preference.
user_pref("identity.fxaccounts.enabled", false);
user_pref("identity.fxaccounts.remote.oauth.uri", "http://localhost/");
user_pref("identity.fxaccounts.remote.profile.uri", "http://localhost/");
user_pref("identity.fxaccounts.remote.webchannel.uri", "http://localhost/");
user_pref("browser.pocket.enabled", false);
user_pref("media.gmp-manager.url", "");
user_pref("media.gmp-manager.certs.1.commonName", "");
user_pref("media.gmp-manager.certs.2.commonName", "");

//****************************************Auto Download**********************************************
user_pref(
    "browser.helperApps.neverAsk.saveToDisk",
    "application/msword, application/csv, application/ris, text/csv, image/png, application/pdf, text/html, text/plain, application/zip, application/x-zip, application/x-zip-compressed, application/download, application/octet-stream"
);
user_pref("browser.download.folderList", 1);
user_pref("browser.download.useDownloadDir", true);

// Suppress "Check Compatibility of Add-ons" dialog in case the extensions.lastAppVersion doesn't match firefox version
user_pref("extensions.showMismatchUI", false);
//***************************************Disable CPOW access restriction and disable prompt confirmation for debugging**********
user_pref("dom.ipc.cpows.forbid-unsafe-from-browser", false);
user_pref("devtools.debugger.prompt-connection", false);

//********************************************Enable customize window style for JS side for TC**********************************
user_pref("dom.disable_window_open_feature.titlebar", false);
user_pref("dom.disable_window_open_feature.close", false);
user_pref("dom.disable_window_open_feature.toolbar", false);
user_pref("dom.disable_window_open_feature.location", false);
user_pref("dom.disable_window_open_feature.personalbar", false);
user_pref("dom.disable_window_open_feature.menubar", false);
user_pref("dom.disable_window_open_feature.resizable", true);
user_pref("dom.disable_window_open_feature.minimizable", false);
user_pref("dom.disable_window_open_feature.status", false);

//*******************************************Disable url suggessions ***********************************************************
user_pref("browser.urlbar.oneOffSearches", false);
user_pref("browser.urlbar.autocomplete.enabled", false);
user_pref("browser.urlbar.suggest.history", false);
user_pref("browser.urlbar.suggest.bookmark", false);
user_pref("browser.urlbar.suggest.openpage", false);
user_pref("browser.urlbar.suggest.searches", false);
user_pref("browser.urlbar.speculativeConnect.enabled", false);
user_pref("browser.search.update", false);
user_pref("browser.urlbar.maxRichResult", 0);
user_pref("browser.urlbar.maxRichResults", 0);

//*********************Prevent the meltdown attach https://meltdownattack.com/ for FF55, could be removed for FF58**************
user_pref("javascript.options.shared_memory", false);

// Allow TC extension to be loaded
user_pref("xpinstall.signatures.required", false);

//*********************Enable the compatible mode let the user-agent value compatible with Firefox for TruClientBrowser*********
user_pref("general.useragent.compatMode.firefox", true);

//*********************Drop-down list doesn't work on TC FF 58. Need to find way to make it work.*******************************
user_pref("dom.select_popup_in_parent.enabled", true);

//*********************Switch to single process mode due to performance requirement*********************************************
user_pref("browser.tabs.remote.force-disable", true);
user_pref("browser.tabs.remote.autostart", false);

//*********************Disable display the survey information*******************************************************************
user_pref("browser.uitour.enabled", false);

//*********************Disable CSP relative warning from console****************************************************************
user_pref("security.csp.enable", false);
user_pref("security.csp.enableStrictDynamic", false);

//*********************Enable Firefox Built-in JS Debugging*********************************************************************
user_pref("devtools.chrome.enabled", true);
user_pref("devtools.debugger.remote-enabled", true);
user_pref("browser.newtabpage.activity-stream.disableSnippets", true);
user_pref("browser.newtabpage.activity-stream.asrouter.providers.snippets", "{}");
user_pref("security.OCSP.enabled", 0);

//*********************Disable media autoplay****************************************************************
user_pref("media.autoplay.default", 1);
user_pref("extensions.fxmonitor.telemetryDisabled", true);
user_pref("extensions.fxmonitor.enabled", false);
user_pref("extensions.formautofill.available", false);
user_pref("browser.urlbar.autoFill", false);
user_pref("network.http.connection-timeout", 0);
user_pref("network.http.keep-alive.timeout", 0);
user_pref("services.settings.security.onecrl.signer", "");
user_pref("services.settings.server", "");
user_pref("extensions.screenshots.disabled", true);
user_pref("identity.fxaccounts.toolbar.enabled", false);
user_pref("identity.fxaccounts.toolbar.accessed", false);
user_pref("identity.fxaccounts.service.sendLoginUrl", "");
user_pref("identity.fxaccounts.service.monitorLoginUrl", "");
user_pref("identity.fxaccounts.account.device.name", "");
user_pref("browser.messaging-system.fxatoolbarbadge.enabled", false);

user_pref("toolkit.legacyUserProfileCustomizations.stylesheets", true);

// for tcb 77
user_pref("browser.search.hiddenOneOffs", "Google,Bing,Amazon.com,DuckDuckGo,eBay,Twitter,Wikipedia (en)");

// for tcb 83
user_pref("security.tls.version.enable-deprecated", true);

user_pref("browser.newtabpage.activity-stream.telemetry.structuredIngestion", false);
user_pref("browser.newtabpage.activity-stream.telemetry.ut.events", false);
user_pref("browser.urlbar.eventTelemetry.enabled", false);
user_pref("privacy.trackingprotection.origin_telemetry.enabled", false);
user_pref("security.app_menu.recordEventTelemetry", false);
user_pref("security.certerrors.recordEventTelemetry", false);
user_pref("security.identitypopup.recordEventTelemetry", true);
user_pref("security.protectionspopup.recordEventTelemetry", false);
user_pref("telemetry.origin_telemetry_test_mode.enabled", false);
user_pref("toolkit.telemetry.debugSlowSql", false);
user_pref("toolkit.telemetry.ecosystemtelemetry.enabled", false);
user_pref("toolkit.telemetry.geckoview.streaming", false);
user_pref("toolkit.telemetry.isGeckoViewMode", false);
user_pref("toolkit.telemetry.testing.overrideProductsCheck", false);
user_pref("browser.urlbar.switchTabs.adoptIntoActiveWindow", false);
user_pref("extensions.pocket.enabled", false);
user_pref("browser.slowStartup.notificationDisabled", true);
user_pref("browser.disableResetPrompt", true);
user_pref("permissions.eventTelemetry.enabled", false);
user_pref("extensions.webcompat-reporter.enabled", false);
user_pref("signon.management.page.breach-alerts.enabled", false);
user_pref("browser.newtabpage.activity-stream.improvesearch.topSiteSearchShortcuts", false);
user_pref("browser.newtab.preload", false);
user_pref("extensions.formautofill.heuristics.enabled", false);
user_pref("extensions.formautofill.section.enabled", false);
user_pref("extensions.formautofill.creditCards.used", false);
user_pref("extensions.formautofill.addresses.enabled", false);
user_pref("extensions.formautofill.creditCards.available", false);
user_pref("extensions.formautofill.creditCards.enabled", false);
user_pref("browser.ctrlTab.recentlyUsedOrder", false);
user_pref("browser.ctrlTab.disallowForScreenReaders", true);
user_pref("app.shield.optoutstudies.enabled", false);
user_pref("extensions.getAddons.cache.enabled", false);
user_pref("extensions.systemAddon.update.enabled", false);
user_pref("app.update.service.enabled", false);
user_pref("app.update.staging.enabled", false);
user_pref("browser.taskbar.lists.enabled", false);
user_pref("browser.taskbar.lists.frequent.enabled", false);
user_pref("browser.taskbar.lists.tasks.enabled", false);
user_pref("browser.library.activity-stream.enabled", false);
user_pref("browser.newtabpage.activity-stream.discoverystream.enabled", false);
user_pref("browser.messaging-system.whatsNewPanel.enabled", false);
user_pref("extensions.abuseReport.enabled", false);
user_pref("signon.generation.enabled", false);
user_pref("security.insecure_password.ui.enabled", false);
user_pref("security.insecure_field_warning.contextual.enabled", false);
user_pref("browser.contentblocking.report.lockwise.enable", false);
user_pref("browser.contentblocking.report.monitor.enabled", false);
